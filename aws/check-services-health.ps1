# Script de v√©rification de la sant√© des services FlightHub
# Utilisation: .\check-services-health.ps1 -Environment production -Region us-east-1

param(
    [Parameter(Mandatory=$false)]
    [ValidateSet("development", "staging", "production")]
    [string]$Environment = "development",
    
    [Parameter(Mandatory=$false)]
    [string]$Region = "us-east-1",
    
    [Parameter(Mandatory=$false)]
    [string]$StackName = "flighthub-stack"
)

Write-Host "üè• V√©rification de la sant√© des services FlightHub..." -ForegroundColor Green
Write-Host "Environnement: $Environment" -ForegroundColor Yellow
Write-Host "R√©gion: $Region" -ForegroundColor Yellow

# R√©cup√©rer les informations de la stack CloudFormation
Write-Host "üîç R√©cup√©ration des informations de la stack..." -ForegroundColor Blue
try {
    $stackOutputs = aws cloudformation describe-stacks --stack-name $StackName --region $Region --query 'Stacks[0].Outputs' | ConvertFrom-Json
    
    if (-not $stackOutputs) {
        throw "Impossible de r√©cup√©rer les outputs de la stack"
    }
    
    $ecsClusterName = $stackOutputs | Where-Object { $_.OutputKey -eq "ECSClusterName" }
    $backendAlbDns = $stackOutputs | Where-Object { $_.OutputKey -eq "BackendALBDNSName" }
    $frontendAlbDns = $stackOutputs | Where-Object { $_.OutputKey -eq "FrontendALBDNSName" }
    $databaseEndpoint = $stackOutputs | Where-Object { $_.OutputKey -eq "DatabaseEndpoint" }
    
    if (-not $ecsClusterName) {
        throw "Impossible de r√©cup√©rer le nom du cluster ECS"
    }
    
    Write-Host "‚úÖ Informations r√©cup√©r√©es:" -ForegroundColor Green
    Write-Host "   Cluster ECS: $($ecsClusterName.OutputValue)" -ForegroundColor Cyan
    if ($backendAlbDns) { Write-Host "   Backend ALB: $($backendAlbDns.OutputValue)" -ForegroundColor Cyan }
    if ($frontendAlbDns) { Write-Host "   Frontend ALB: $($frontendAlbDns.OutputValue)" -ForegroundColor Cyan }
    if ($databaseEndpoint) { Write-Host "   Database: $($databaseEndpoint.OutputValue)" -ForegroundColor Cyan }
    
} catch {
    Write-Host "‚ùå Erreur lors de la r√©cup√©ration des informations de la stack: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Fonction pour v√©rifier la sant√© des services ECS
function CheckECSServices {
    Write-Host "`nüîç V√©rification des services ECS..." -ForegroundColor Blue
    
    try {
        $services = aws ecs list-services --cluster $ecsClusterName.OutputValue --region $Region | ConvertFrom-Json
        
        if (-not $services.serviceArns) {
            Write-Host "   ‚ö†Ô∏è  Aucun service trouv√© dans le cluster" -ForegroundColor Yellow
            return
        }
        
        $serviceNames = $services.serviceArns | ForEach-Object { $_.Split('/')[-1] }
        Write-Host "   Services trouv√©s: $($serviceNames -join ', ')" -ForegroundColor Gray
        
        # V√©rifier la sant√© de chaque service
        foreach ($serviceName in $serviceNames) {
            Write-Host "`n   üìä Service: $serviceName" -ForegroundColor Cyan
            
            $serviceDetails = aws ecs describe-services --cluster $ecsClusterName.OutputValue --services $serviceName --region $Region | ConvertFrom-Json
            
            if ($serviceDetails.services) {
                $service = $serviceDetails.services[0]
                
                Write-Host "     Status: $($service.status)" -ForegroundColor $(if ($service.status -eq "ACTIVE") { "Green" } else { "Red" })
                Write-Host "     Desired Count: $($service.desiredCount)" -ForegroundColor Gray
                Write-Host "     Running Count: $($service.runningCount)" -ForegroundColor Gray
                Write-Host "     Pending Count: $($service.pendingCount)" -ForegroundColor Gray
                
                if ($service.events) {
                    $latestEvent = $service.events[0]
                    Write-Host "     Dernier √©v√©nement: $($latestEvent.message)" -ForegroundColor Gray
                }
                
                # V√©rifier les t√¢ches
                $tasks = aws ecs list-tasks --cluster $ecsClusterName.OutputValue --service-name $serviceName --region $Region | ConvertFrom-Json
                
                if ($tasks.taskArns) {
                    Write-Host "     T√¢ches actives: $($tasks.taskArns.Count)" -ForegroundColor Gray
                    
                    foreach ($taskArn in $tasks.taskArns[0..2]) { # Limiter √† 3 t√¢ches
                        $taskDetails = aws ecs describe-tasks --cluster $ecsClusterName.OutputValue --tasks $taskArn --region $Region | ConvertFrom-Json
                        
                        if ($taskDetails.tasks) {
                            $task = $taskDetails.tasks[0]
                            $taskId = $task.taskArn.Split('/')[-1]
                            Write-Host "       T√¢che $taskId: $($task.lastStatus) - $($task.healthStatus)" -ForegroundColor Gray
                        }
                    }
                }
            }
        }
        
    } catch {
        Write-Host "   ‚ùå Erreur lors de la v√©rification des services ECS: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Fonction pour v√©rifier la sant√© des ALB
function CheckALBHealth {
    Write-Host "`nüîç V√©rification des Application Load Balancers..." -ForegroundColor Blue
    
    if ($backendAlbDns) {
        Write-Host "   üìä Backend ALB: $($backendAlbDns.OutputValue)" -ForegroundColor Cyan
        
        try {
            # Test de connectivit√© HTTP
            $response = Invoke-WebRequest -Uri "http://$($backendAlbDns.OutputValue)/api/health" -UseBasicParsing -TimeoutSec 10 -ErrorAction Stop
            Write-Host "     ‚úÖ Health check: $($response.StatusCode) - $($response.StatusDescription)" -ForegroundColor Green
        } catch {
            Write-Host "     ‚ùå Health check √©chou√©: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
    
    if ($frontendAlbDns) {
        Write-Host "   üìä Frontend ALB: $($frontendAlbDns.OutputValue)" -ForegroundColor Cyan
        
        try {
            # Test de connectivit√© HTTP
            $response = Invoke-WebRequest -Uri "http://$($frontendAlbDns.OutputValue)/" -UseBasicParsing -TimeoutSec 10 -ErrorAction Stop
            Write-Host "     ‚úÖ Connectivit√©: $($response.StatusCode) - $($response.StatusDescription)" -ForegroundColor Green
        } catch {
            Write-Host "     ‚ùå Connectivit√© √©chou√©e: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
}

# Fonction pour v√©rifier la base de donn√©es
function CheckDatabase {
    Write-Host "`nüîç V√©rification de la base de donn√©es..." -ForegroundColor Blue
    
    if ($databaseEndpoint) {
        Write-Host "   üìä Endpoint: $($databaseEndpoint.OutputValue)" -ForegroundColor Cyan
        
        try {
            # V√©rifier si l'endpoint est accessible (ping)
            $ping = Test-NetConnection -ComputerName $databaseEndpoint.OutputValue -Port 5432 -InformationLevel Quiet
            if ($ping) {
                Write-Host "     ‚úÖ Port 5432 accessible" -ForegroundColor Green
            } else {
                Write-Host "     ‚ùå Port 5432 non accessible" -ForegroundColor Red
            }
        } catch {
            Write-Host "     ‚ö†Ô∏è  Impossible de tester la connectivit√©: $($_.Exception.Message)" -ForegroundColor Yellow
        }
    } else {
        Write-Host "   ‚ö†Ô∏è  Endpoint de base de donn√©es non trouv√©" -ForegroundColor Yellow
    }
}

# Fonction pour v√©rifier les logs CloudWatch
function CheckCloudWatchLogs {
    Write-Host "`nüîç V√©rification des logs CloudWatch..." -ForegroundColor Blue
    
    $logGroups = @(
        "/ecs/$Environment-flighthub-backend",
        "/ecs/$Environment-flighthub-frontend"
    )
    
    foreach ($logGroup in $logGroups) {
        Write-Host "   üìä Log Group: $logGroup" -ForegroundColor Cyan
        
        try {
            $logs = aws logs describe-log-streams --log-group-name $logGroup --order-by LastEventTime --descending --max-items 1 --region $Region | ConvertFrom-Json
            
            if ($logs.logStreams) {
                $latestStream = $logs.logStreams[0]
                Write-Host "     Dernier stream: $($latestStream.logStreamName)" -ForegroundColor Gray
                Write-Host "     Dernier √©v√©nement: $($latestStream.lastEventTimestamp)" -ForegroundColor Gray
            } else {
                Write-Host "     ‚ö†Ô∏è  Aucun stream de logs trouv√©" -ForegroundColor Yellow
            }
        } catch {
            Write-Host "     ‚ùå Erreur lors de la v√©rification des logs: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
}

# Ex√©cuter toutes les v√©rifications
CheckECSServices
CheckALBHealth
CheckDatabase
CheckCloudWatchLogs

# R√©sum√© et recommandations
Write-Host "`nüìã R√©sum√© et recommandations:" -ForegroundColor Green

Write-Host "`nüîç Commandes utiles pour le debugging:" -ForegroundColor Yellow
Write-Host "   V√©rifier les services ECS:" -ForegroundColor Gray
Write-Host "     aws ecs describe-services --cluster $($ecsClusterName.OutputValue) --region $Region" -ForegroundColor White
Write-Host "   V√©rifier les t√¢ches ECS:" -ForegroundColor Gray
Write-Host "     aws ecs list-tasks --cluster $($ecsClusterName.OutputValue) --region $Region" -ForegroundColor White
Write-Host "   V√©rifier les logs CloudWatch:" -ForegroundColor Gray
Write-Host "     aws logs tail /ecs/$Environment-flighthub-backend --region $Region" -ForegroundColor White
Write-Host "     aws logs tail /ecs/$Environment-flighthub-frontend --region $Region" -ForegroundColor White

Write-Host "`nüéØ URLs d'acc√®s:" -ForegroundColor Yellow
if ($backendAlbDns) {
    Write-Host "   Backend API: http://$($backendAlbDns.OutputValue)" -ForegroundColor Cyan
}
if ($frontendAlbDns) {
    Write-Host "   Frontend: http://$($frontendAlbDns.OutputValue)" -ForegroundColor Cyan
}

Write-Host "`n‚úÖ V√©rification de la sant√© termin√©e!" -ForegroundColor Green


