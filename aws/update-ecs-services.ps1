# Script de mise √† jour des services ECS avec les nouvelles images
# Utilisation: .\update-ecs-services.ps1 -Environment production -Region us-east-1 -ImageTag latest

param(
    [Parameter(Mandatory=$false)]
    [ValidateSet("development", "staging", "production")]
    [string]$Environment = "development",
    
    [Parameter(Mandatory=$false)]
    [string]$Region = "us-east-1",
    
    [Parameter(Mandatory=$false)]
    [string]$StackName = "flighthub-stack",
    
    [Parameter(Mandatory=$false)]
    [string]$ImageTag = "latest"
)

Write-Host "üîÑ Mise √† jour des services ECS..." -ForegroundColor Green
Write-Host "Environnement: $Environment" -ForegroundColor Yellow
Write-Host "R√©gion: $Region" -ForegroundColor Yellow
Write-Host "Tag d'image: $ImageTag" -ForegroundColor Yellow

# R√©cup√©rer les informations de la stack CloudFormation
Write-Host "üîç R√©cup√©ration des informations de la stack..." -ForegroundColor Blue
try {
    $stackOutputs = aws cloudformation describe-stacks --stack-name $StackName --region $Region --query 'Stacks[0].Outputs' | ConvertFrom-Json
    
    if (-not $stackOutputs) {
        throw "Impossible de r√©cup√©rer les outputs de la stack"
    }
    
    $ecsClusterName = $stackOutputs | Where-Object { $_.OutputKey -eq "ECSClusterName" }
    $backendEcrUri = $stackOutputs | Where-Object { $_.OutputKey -eq "BackendECRRepositoryUri" }
    $frontendEcrUri = $stackOutputs | Where-Object { $_.OutputKey -eq "FrontendECRRepositoryUri" }
    
    if (-not $ecsClusterName -or -not $backendEcrUri -or -not $frontendEcrUri) {
        throw "Impossible de r√©cup√©rer les informations ECS/ECR depuis la stack"
    }
    
    Write-Host "‚úÖ Informations r√©cup√©r√©es:" -ForegroundColor Green
    Write-Host "   Cluster ECS: $($ecsClusterName.OutputValue)" -ForegroundColor Cyan
    Write-Host "   Backend ECR: $($backendEcrUri.OutputValue)" -ForegroundColor Cyan
    Write-Host "   Frontend ECR: $($frontendEcrUri.OutputValue)" -ForegroundColor Cyan
    
} catch {
    Write-Host "‚ùå Erreur lors de la r√©cup√©ration des informations de la stack: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "V√©rifiez que la stack '$StackName' existe et est d√©ploy√©e avec succ√®s" -ForegroundColor Yellow
    exit 1
}

# Fonction pour mettre √† jour un service ECS
function UpdateECSService {
    param(
        [string]$ServiceName,
        [string]$ImageUri
    )
    
    Write-Host "`nüîÑ Mise √† jour du service $ServiceName..." -ForegroundColor Blue
    
    # R√©cup√©rer la d√©finition de t√¢che actuelle
    Write-Host "   R√©cup√©ration de la d√©finition de t√¢che actuelle..." -ForegroundColor Yellow
    $taskDefinition = aws ecs describe-task-definition --task-definition $ServiceName --region $Region | ConvertFrom-Json
    
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Impossible de r√©cup√©rer la d√©finition de t√¢che pour $ServiceName" -ForegroundColor Red
        return $false
    }
    
    # Cr√©er une nouvelle d√©finition de t√¢che avec la nouvelle image
    $newTaskDef = $taskDefinition.taskDefinition
    $newTaskDef.containerDefinitions[0].image = "$ImageUri`:$ImageTag"
    
    # Supprimer les champs qui ne peuvent pas √™tre modifi√©s
    $newTaskDef.PSObject.Properties.Remove('taskDefinitionArn')
    $newTaskDef.PSObject.Properties.Remove('revision')
    $newTaskDef.PSObject.Properties.Remove('status')
    $newTaskDef.PSObject.Properties.Remove('requiresAttributes')
    $newTaskDef.PSObject.Properties.Remove('placementConstraints')
    $newTaskDef.PSObject.Properties.Remove('compatibilities')
    $newTaskDef.PSObject.Properties.Remove('registeredAt')
    $newTaskDef.PSObject.Properties.Remove('registeredBy')
    
    # Cr√©er un fichier temporaire pour la nouvelle d√©finition
    $tempFile = "temp-task-def-$ServiceName.json"
    $newTaskDef | ConvertTo-Json -Depth 10 | Out-File -FilePath $tempFile -Encoding UTF8
    
    try {
        # Enregistrer la nouvelle d√©finition de t√¢che
        Write-Host "   Enregistrement de la nouvelle d√©finition de t√¢che..." -ForegroundColor Yellow
        $newTaskDefArn = aws ecs register-task-definition --cli-input-json file://$tempFile --region $Region --query 'taskDefinition.taskDefinitionArn' --output text
        
        if ($LASTEXITCODE -ne 0) {
            throw "√âchec de l'enregistrement de la nouvelle d√©finition de t√¢che"
        }
        
        Write-Host "   ‚úÖ Nouvelle d√©finition de t√¢che enregistr√©e: $newTaskDefArn" -ForegroundColor Green
        
        # Mettre √† jour le service
        Write-Host "   Mise √† jour du service..." -ForegroundColor Yellow
        aws ecs update-service --cluster $ecsClusterName.OutputValue --service $ServiceName --task-definition $newTaskDefArn --region $Region | Out-Null
        
        if ($LASTEXITCODE -ne 0) {
            throw "√âchec de la mise √† jour du service"
        }
        
        Write-Host "   ‚úÖ Service $ServiceName mis √† jour avec succ√®s" -ForegroundColor Green
        
        # Attendre que le service soit stable
        Write-Host "   ‚è≥ Attente de la stabilisation du service..." -ForegroundColor Yellow
        aws ecs wait services-stable --cluster $ecsClusterName.OutputValue --services $ServiceName --region $Region
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "   ‚úÖ Service $ServiceName est stable" -ForegroundColor Green
        } else {
            Write-Host "   ‚ö†Ô∏è  Service $ServiceName pourrait ne pas √™tre stable" -ForegroundColor Yellow
        }
        
        return $true
        
    } catch {
        Write-Host "‚ùå Erreur lors de la mise √† jour du service $ServiceName`: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    } finally {
        # Nettoyer le fichier temporaire
        if (Test-Path $tempFile) {
            Remove-Item $tempFile -Force
        }
    }
}

# Mettre √† jour le service backend
$backendServiceName = "$Environment-flighthub-backend"
$backendSuccess = UpdateECSService -ServiceName $backendServiceName -ImageUri $backendEcrUri.OutputValue

# Mettre √† jour le service frontend
$frontendServiceName = "$Environment-flighthub-frontend"
$frontendSuccess = UpdateECSService -ServiceName $frontendServiceName -ImageUri $frontendEcrUri.OutputValue

# R√©sum√©
Write-Host "`nüìä R√©sum√© des mises √† jour:" -ForegroundColor Green
if ($backendSuccess) {
    Write-Host "‚úÖ Backend: Succ√®s" -ForegroundColor Green
} else {
    Write-Host "‚ùå Backend: √âchec" -ForegroundColor Red
}

if ($frontendSuccess) {
    Write-Host "‚úÖ Frontend: Succ√®s" -ForegroundColor Green
} else {
    Write-Host "‚ùå Frontend: √âchec" -ForegroundColor Red
}

if ($backendSuccess -and $frontendSuccess) {
    Write-Host "`nüéØ Prochaines √©tapes:" -ForegroundColor Green
    Write-Host "1. V√©rifier la sant√© des services" -ForegroundColor White
    Write-Host "2. Tester l'application" -ForegroundColor White
    Write-Host "3. Surveiller les logs CloudWatch" -ForegroundColor White
    
    Write-Host "`nüîç V√©rification de la sant√© des services:" -ForegroundColor Green
    Write-Host "   aws ecs describe-services --cluster $($ecsClusterName.OutputValue) --services $backendServiceName $frontendServiceName --region $Region" -ForegroundColor Gray
    
    Write-Host "`nüìã Logs des services:" -ForegroundColor Green
    Write-Host "   Backend: /ecs/$Environment-flighthub-backend" -ForegroundColor Cyan
    Write-Host "   Frontend: /ecs/$Environment-flighthub-frontend" -ForegroundColor Cyan
    
    Write-Host "`n‚úÖ Mise √† jour des services termin√©e avec succ√®s!" -ForegroundColor Green
} else {
    Write-Host "`n‚ùå Certains services n'ont pas pu √™tre mis √† jour" -ForegroundColor Red
    exit 1
}


